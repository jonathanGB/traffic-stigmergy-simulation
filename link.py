"""
Represents a road link between two intersections.
Links are discretized into a matrix of cells. The number of rows is the number of lanes, and
the number of columns is the different places occupied by a car on a lane.
Every cell is represented as a Simpy resource with 1-capacity (so there's only one car per resource).
 env: Simpy environment
 intersections: (startNode, endNode)
 cells: matrix of simpy.Resource
 edge: data about the edge (generated by the topology parser)...
  {
   "lanes": number of lanes,
   "l":     Euclidean length of the lane,
   "vmax":  maximum speed on the lane,
   "cells": number of cells in a lane,
   "cap":   capacity of the link (number of cells * number of lanes)
  }
 cache: stigmergy cache
"""
class Link:
  
  def __init__(self, env, intersections, cells, edge, cache):
    self.start = intersections[0]
    self.end = intersections[1]
    self.cells = cells
    self.cache = cache # holds stigmergy info for the lane
    self.env = env
    self.data = edge

  """
  Returns the weight of this link.
  Current implementation only uses the number of cells 
  (which is proportionate to the time to traverse the link).
  Eventually, we'll want to involve stigmergy information.
  """
  def get_weight(self):
    return self.data["cells"]
